---
params:
  project_name: NULL
  project_number: NULL
  qualified: NULL
  unqualified: NULL
  push_log: system.file("push_log.csv", package = "otndo")
  deployment: NULL
  since: NULL
format:
  html:
    self-contained: true
execute:
  echo: false
title: "`r paste('Receiver data push summary:', params$project_name)`"
author: "Created with the [`otndo` R package](https://otndo.obrien.page) (v. `r packageVersion('otndo')`)"
---
```{r, setup, include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE, warning = FALSE, message = FALSE
)
```


```{r}
#| label: packages
#| message: false

library(data.table)
library(sf)
library(mapview)
library(ggplot2)
library(reactable)
```

```{r}
#| label: extraction-files-read

qualified <- fread(params$qualified)
unqualified <- fread(params$unqualified)

push_log <- data.table::fread(params$push_log)
```

```{r}
#| label: n-pis
#| warning: false

pis <- pi_summary(matched, type = "receiver")
```

```{r}
#| label: otn-query

projects <- unique(qualified$trackercode)

table_name <- c(
  "otn_resources_metadata_points",
  "project_metadata"
)

otn_metadata_query <- paste0(
  "https://members.oceantrack.org/geoserver/otn/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=otn:",
  table_name,
  "&outputFormat=csv&CQL_FILTER=strMatches(collectioncode,'",
  paste(
    paste0(
      ".*",
      gsub(".*\\.", "", projects)
    ),
    collapse = "|"
  ),
  "')=true"
) |>
  URLencode()

otn_tables <- lapply(otn_metadata_query, fread)

# otn_tables <- lapply(otn_tables, function(.) .[!grepl('\\.', collectioncode), collectioncode := paste0('OTN.', collectioncode)])
otn_tables <- lapply(otn_tables, function(.) .[, collectioncode := gsub(".*\\.", "", collectioncode)])
```


```{r}
#| label: proper-urls

# if(act_eval){
#   act <- paste0('https://matos.asascience.com/project/detail/',
#                 params$project_number)
#   otn <- paste0('https://members.oceantrack.org/OTN/project?ccode=ACT.PROJ',
#                 params$project_number)
# }else{
act <- "https://matos.asascience.com/project"
otn <- "https://members.oceantrack.org/OTN/projects"
# }
```

These are data related to receiver data from the `r format(push_log$date[nrow(push_log)], '%B %Y')` OTN data push. New matched detection files (["qualified" files](https://members.oceantrack.org/data/otn-detection-extract-documentation-matched-to-animals#autotoc-item-autotoc-2)) were uploaded on `r format(push_log$date[nrow(push_log)], '%B %d')`. The previous data push occurred on `r format(push_log$date[nrow(push_log) - 1], '%B %d, %Y')`.


## Overall

A total of `r format(nrow(qualified), big.mark = ',')` detections of `r uniqueN(qualified, by  = 'fieldnumber')` individuals have been matched via [ACT](`r act`), [FACT](https://secoora.org/fact/projects/), and/or [OTN](`r otn`). The detections span across `r uniqueN(qualified, by = 'trackercode')` different projects consisting of `r length(unique(unlist(strsplit(pis$PI, ',\\s?'))))` principal investigators.


```{r}
#| label: otn-match-table
#| column: page
#| fig-cap: Table 1. Total detections and number of individual fish heard from other OTN node projects.
#| fig-cap-location: top

mt <- merge(
  qualified[, .(detections = .N), by = "trackercode"],
  unique(qualified, by = "fieldnumber")[, .(individuals = .N), by = "trackercode"]
)

# mt <- merge(mt, pis[, .(trackercode, PI, POC, emails)])
mt <- merge(mt, pis[, .(trackercode, PI, POC, PI_emails, POC_emails)])
# mt[, trackercode := ifelse(!grepl('^ACT|^FACT|^OTN', trackercode),
#                           paste0('OTN.', trackercode), trackercode)]
mt[, trackercode := gsub(".*\\.", "", trackercode)]

mt <- merge(mt, otn_tables[[1]][, .(resource_full_name, trackercode = collectioncode)])

mt[, ":="(network = gsub("\\..*", "", trackercode),
  code = gsub(".*\\.", "", trackercode),
  trackercode = NULL,
  PI = fifelse(PI == "NA", "", PI),
  POC = fifelse(POC == "NA", "", POC))]

mt <- mt[, .(PI, POC, resource_full_name, network, code, detections, individuals, PI_emails, POC_emails)]
setnames(mt, c("PI", "POC", "Project name", "Network", "Project code", "Detections", "Individuals", "PI_emails", "POC_emails"))

setorder(mt, -"Detections", -"Individuals")

reactable(mt,
  columns = list(
    PI = colDef(
      html = T,
      cell = function(value, index) {
        sprintf(
          '<a href=mailto:%s target="_blank">%s</a>',
          mt$PI_emails[index], value
        )
      },
      minWidth = 150
    ),
    POC = colDef(
      html = T,
      cell = function(value, index) {
        sprintf(
          '<a href=mailto:%s target="_blank">%s</a>',
          mt$POC_emails[index], value
        )
      },
      minWidth = 150
    ),
    PI_emails = colDef(show = F),
    POC_emails = colDef(show = F),
    `Project name` = colDef(minWidth = 200)
  )
)
```

```{r}
#| label: otn-match-map
#| fig-cap: Figure 1. Bounding box of detected external projects. This does not necessarily reflect the distribution of fish heard by this project's receivers.

otn_sf <- otn_tables[[1]] |>
  data.frame() |>
  st_as_sf(wkt = "the_geom", crs = 4326)
otn_limits <- st_bbox(otn_sf)

natural_earth <- st_read(system.file("ne_110m_coastline.gpkg",
  package = "otndo"
), quiet = T)

ggplot() +
  geom_sf(data = natural_earth) +
  geom_sf(data = otn_sf, fill = NA, color = "blue") +
  coord_sf(
    xlim = c(otn_limits["xmin"] - 5, otn_limits["xmax"] + 5),
    ylim = c(otn_limits["ymin"] - 5, otn_limits["ymax"] + 5)
  ) +
  labs(title = "Geographic extent of detected projects") +
  theme_minimal()
```


```{r}
#| label: temporal-distribution
#| fig-cap: Figure 2. Temporal distribution of detections by external project, i.e., the dates when this project heard other project's fish.

qualified[, day := as.Date(datecollected)]
qualified_time <- unique(qualified, by = c("trackercode", "day"))

ggplot(qualified_time) +
  geom_tile(aes(x = day, y = gsub(".*\\.", "", trackercode))) +
  labs(
    x = "", y = "",
    subtitle = "Temporal distribution of detections by project"
  ) +
  theme_minimal()
```


```{r}
#| label: deployment-gantt
#| fig-cap: Figure 3. Deployment record of receivers across time. Black bars indicate periods of deployments, while red bars denote download dates.

if (!is.null(params$deployment)) {
  deployment <- fread(params$deployment)

  ggplot(data = deployment) +
    geom_linerange(
      aes(
        y = stationname,
        xmin = deploy_date_time,
        xmax = recover_date_time
      ),
      linewidth = 5
    ) +
    geom_linerange(
      aes(
        ymin = as.numeric(factor(stationname)) - 0.4,
        ymax = as.numeric(factor(stationname)) + 0.4,
        x = recover_date_time
      ),
      color = "red", linewidth = 2
    ) +
    scale_x_datetime(date_breaks = "month", date_labels = "%b %y") +
    labs(x = NULL, y = NULL, title = "Temporal receiver coverage") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
```


```{r}
#| label: station-summary-table
#| fig-cap: Table 2. Total number of detections and number of individual fish heard per project receiver.
#| fig-cap-location: top

# .simpleCap <- function(x) {
#   x <- tolower(x)
#   s <- strsplit(x, " ")[[1]]
#   paste(toupper(substring(s, 1, 1)), substring(s, 2),
#         sep = "", collapse = " ")
# }

station_summary <- merge(
  qualified[, .(detections = .N), by = "station"],
  unique(qualified, by = c("fieldnumber", "station"))[, .(
    individuals = .N,
    long = mean(longitude),
    lat = mean(latitude)
  ),
  by = "station"
  ]
)
# DT(, station := sapply(station, .simpleCap))

setorder(station_summary, -lat, long)

station_summary <- station_summary[, .(station, detections, individuals)]
setnames(station_summary, c("Station", "Detections", "Individuals"))

reactable(station_summary)
```


```{r}
#| label: station-spatial

station_spatial <- qualified |>
  unique(by = "station")
station_spatial <- station_spatial[station_summary[, Station := toupper(Station)], ,
  on = c("station" = "Station")
]
station_spatial <- station_spatial[, .(station, Detections, Individuals, longitude, latitude)] |>
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

station_center <- st_centroid(st_union(station_spatial))
station_center <- st_coordinates(station_center)
```


```{r}
#| label: detection-map-leaflet
#| fig-cap: Figure 4. Number of detections per project receiver. Points represent receiver locations, while size and color reflect the number of detections at that location.

mapview::mapview(station_spatial,
  zcol = "Detections",
  cex = "Individuals",
  layer.name = "Matched detections"
)
```


```{r}
#| label: detection-map
#| eval: false

# This gives a static map. Currently not run bc we have the js map. Will need
#   better basemap (more refined than 110m Natural Earth) if this is used in the future
station_spatial <- qualified |>
  unique(by = "station")
station_spatial <- station_spatial[station_summary[, Station := toupper(Station)], , on = c("station" = "Station")] |>
  data.frame() |>
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

station_limits <- st_bbox(station_spatial)
x_nudge <- (station_limits[3] - station_limits[1]) * (1 / 10)
y_nudge <- (station_limits[4] - station_limits[2]) * (1 / 10)

# ggplot() +
#   geom_sf(data = natural_earth, fill = 'lightgray') +
#   geom_sf(data = station_spatial,
#           aes(size = Detections, color = Individuals)) +
#   labs(subtitle = 'Records by receivers') +
#   scale_color_viridis_c() +
#   coord_sf(xlim = c(station_limits['xmin'] - x_nudge, station_limits['xmax'] + x_nudge),
#            ylim = c(station_limits['ymin'] - y_nudge, station_limits['ymax'] + y_nudge)) +
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
```





```{r results='asis', echo=FALSE}
if (is.null(params$since)) {
  cat("<!---")
}
```
## What's new?

```{r}
#| label: new-matches
if (!is.null(params$since)) {
  since_date <- as.IDate(params$since)
} else {
  since_date <- as.IDate("1970-01-01")
}
new_matches <- qualified[datelastmodified > since_date]
```

Since `r format(since_date, '%B %Y')`, `r format(nrow(new_matches), big.mark = ',')` detections of `r uniqueN(new_matches, by  = 'fieldnumber')` individuals have been updated or newly-matched.

```{r}
#| label: new-otn-match-table
#| column: page
#| fig-cap: Table 3. Total number of new detections and individual fish heard per project receiver.
#| fig-cap-location: top
new_mt <- merge(
  new_matches[, .(detections = .N), by = "trackercode"],
  unique(new_matches, by = "fieldnumber")[, .(individuals = .N), by = "trackercode"]
)

new_mt <- merge(new_mt, pis[, .(trackercode, PI, POC, PI_emails, POC_emails)])
# new_mt[, trackercode := ifelse(!grepl('^ACT|^FACT|^OTN', trackercode),
#                           paste0('ACT.', trackercode), trackercode)]
new_mt[, trackercode := gsub(".*\\.", "", trackercode)]

new_mt <- merge(new_mt, otn_tables[[1]][, .(resource_full_name, trackercode = collectioncode)])

new_mt[, ":="(network = gsub("\\..*", "", trackercode),
  code = gsub(".*\\.", "", trackercode),
  trackercode = NULL)]

new_mt <- new_mt[, .(PI, POC, resource_full_name, network, code, detections, individuals, PI_emails, POC_emails)]
setnames(new_mt, c("PI", "POC", "Project name", "Network", "Project code", "Detections", "Individuals", "PI_emails", "POC_emails"))

setorder(new_mt, -"Detections", -"Individuals")

reactable(new_mt,
  columns = list(
    PI = colDef(
      html = T,
      cell = function(value, index) {
        sprintf(
          '<a href=mailto:%s target="_blank">%s</a>',
          new_mt$PI_emails[index], value
        )
      },
      minWidth = 150
    ),
    POC = colDef(
      html = T,
      cell = function(value, index) {
        sprintf(
          '<a href=mailto:%s target="_blank">%s</a>',
          new_mt$POC_emails[index], value
        )
      },
      minWidth = 150
    ),
    PI_emails = colDef(show = F),
    POC_emails = colDef(show = F),
    `Project name` = colDef(minWidth = 200)
  )
)
```

```{r}
#| label: new-otn-match-map
#| fig-cap: Figure 5. Bounding box of external projects detected since the last data push. This does not necessarily reflect the distribution of fish heard by this project's receivers.

new_otn_sf <- otn_sf[grepl(
  paste(unique(new_matches$trackercode), collapse = "|"),
  otn_sf$collectioncode
), ]
otn_limits <- st_bbox(new_otn_sf)

ggplot() +
  geom_sf(data = natural_earth) +
  geom_sf(data = new_otn_sf, fill = NA, color = "blue") +
  coord_sf(
    xlim = c(otn_limits["xmin"] - 5, otn_limits["xmax"] + 5),
    ylim = c(otn_limits["ymin"] - 5, otn_limits["ymax"] + 5)
  ) +
  labs(title = "Geographic extent of newly-detected projects") +
  theme_minimal()
```


```{r}
#| label: new-station-summary-table
#| fig-cap: Table 4. Total number of detections and number of individual fish heard per project receiver since the last data push.
#| fig-cap-location: top

station_summary <- merge(
  new_matches[, .(detections = .N), by = "station"],
  unique(new_matches, by = c("fieldnumber", "station"))[, .(
    individuals = .N,
    long = mean(longitude),
    lat = mean(latitude)
  ), by = "station"]
) #|>
# DT(, station := sapply(station, .simpleCap)]

setorder(station_summary, -lat, long)

station_summary <- station_summary[, .(station, detections, individuals)]
setnames(station_summary, c("Station", "Detections", "Individuals"))

setnames(station_summary, c("Station", "Detections", "Individuals"))

reactable(station_summary)
```
</figure>

```{r}
#| label: new-detection-map

# station_spatial <- qualified |>
#   unique(by = 'stationname') |>
#   DT(station_summary, , on = c('stationname'= 'Station')) |>
#   data.frame() |>
#   st_as_sf(coords = c('deploy_long', 'deploy_lat'), crs = 4326)
#
#
# ggplot() +
#   geom_sf(data = bathy, color = 'lightgray') +
#   geom_sf(data = midatl) +
#   geom_sf(data = station_spatial,
#           aes(linewidth = Detections, color = Individuals)) +
#   labs(subtitle = 'New records by Mid-Bay receivers') +
#   scale_color_viridis_c() +
#   coord_sf(xlim = c(-76.5, -76.15), ylim = c(38.25, 38.45)) +
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
```{r results='asis', echo=FALSE}
if (is.null(params$since)) {
  cat("-->")
}
```

## Unmatched detections

```{r}
#| label: unqualified

unqual_f <- unqualified[, .N, by = "fieldnumber"][N <= 1]
setnames(unqual_f, c("Transmitter", "N"))

unqual_real <- unqualified[, .N, by = "fieldnumber"][N > 1]
setnames(unqual_real, c("Transmitter", "N"))
```

Some detections were not matched to other investigators via OTN nodes. There are `r format(nrow(unqualified), big.mark = ',')` of these ["unqualified" detections](https://members.oceantrack.org/data/otn-detection-extract-documentation-matched-to-animals#autotoc-item-autotoc-2) across `r uniqueN(unqualified, by  = 'fieldnumber')` transmitters.

`r nrow(unqual_f)` of these are very likely false, as they only have one detection; this leaves detections of `r nrow(unqual_real)` transmitters that could find a home elsewhere.

### Likely false detections (N detections = 1)

```{r}
#| label: unqualified-false

reactable(unqual_f)
```

### Possibly real detections (N detections > 1)

```{r}
#| label: unqualified-real

reactable(unqual_real)
```


```{r}
#| label: temporal-distribution-unqual
#| fig-cap: Figure 6. Temporal distribution of unmatched detections by receiver, i.e., the dates when a receiver in this project heard a transmitter that was not matched to an external project.

unqualified[, day := as.Date(datecollected)]
unqualified_time <- unique(unqualified, by = c("station", "day"))

ggplot(unqualified_time) +
  geom_tile(aes(x = day, y = station)) +
  labs(
    x = "", y = "",
    subtitle = "Temporal distribution of unmatched detections by station"
  ) +
  theme_minimal()
```
